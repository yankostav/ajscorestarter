"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Rx_1 = require("rxjs/Rx");
var analyticsData_1 = require("../models/analyticsData");
var BaseServices = (function () {
    function BaseServices(http) {
        this.http = http;
        if (!this.getLocalStorage("analyticsData")) {
            var analyticsData = new analyticsData_1.AnalyticsData();
            analyticsData.exceptions = new Array();
            analyticsData.performances = new Array();
            this.setLocalStorage("analyticsData", analyticsData);
        }
    }
    BaseServices.prototype.httpGet = function (controller, success, error) {
        this.get(controller)
            .subscribe(function (obj) { success(obj); }, function (errorMessage) {
            error(errorMessage);
        });
    };
    BaseServices.prototype.get = function (controller) {
        return this.http.get("api/" + controller)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    BaseServices.prototype.httpPost = function (object, controller, success, error) {
        this.post(object, controller)
            .subscribe(function (obj) { success(obj); }, function (errorMessage) {
            error(errorMessage);
        });
    };
    BaseServices.prototype.post = function (object, controller) {
        return this.http.post("api/" + controller, object)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    BaseServices.prototype.httpDelete = function (controller, success, error) {
        this.delete(controller)
            .subscribe(function (obj) { success(obj); }, function (errorMessage) {
            error(errorMessage);
        });
    };
    BaseServices.prototype.delete = function (controller) {
        return this.http.delete("api/" + controller)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    BaseServices.prototype.handleError = function (error, caught) {
        if (error.status !== 502 && error.status !== 0) {
            var analyticsData = JSON.parse(localStorage.getItem("analyticsData"));
            if (analyticsData.exceptions.length > 99) {
                analyticsData.exceptions.pop();
            }
            var exception = new analyticsData_1.Exception();
            exception.date = new Date();
            exception.errorMessage = error._body;
            analyticsData.exceptions.unshift(exception);
            localStorage.setItem("analyticsData", JSON.stringify(analyticsData));
        }
        return Rx_1.Observable.throw(error._body);
    };
    BaseServices.prototype.setLocalStorage = function (name, anyObject) {
        if (anyObject instanceof Array) {
            anyObject = { array: anyObject };
        }
        if (typeof (anyObject) == "object") {
            var stringVal = JSON.stringify(anyObject);
            if (stringVal)
                localStorage.setItem(name, stringVal);
        }
    };
    BaseServices.prototype.getLocalStorage = function (name) {
        var value = localStorage.getItem(name);
        if (!value)
            return null;
        if (value.substring(0, 1) === "{") {
            var obj = JSON.parse(value);
            if ("array" in obj)
                return obj.array;
            return obj;
        }
        return null;
    };
    return BaseServices;
}());
exports.BaseServices = BaseServices;
//# sourceMappingURL=data:application/json;base64,